<div class="row" data-bind="foreach:userSquares">
    <div class="col-sm-4">
        <div class="col-sm-12">
            <table class="table">
                <thead>
                    <tr>
                        <th><small>Days</small></th>


                        <th><small>Hours</small></th>


                        <th><small>Minutes</small></th>


                        <th><small>Seconds</small></th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td><input type="text" class="form-control" data-bind="value:duration().days,event:{change:onDurationEdit}" /></td>
                        <td><input type="text" class="form-control" data-bind="value:duration().hours,event:{change:onDurationEdit}" /></td>
                        <td><input type="text" class="form-control" data-bind="value:duration().minutes,event:{change:onDurationEdit}" /></td>
                        <td><input type="text" class="form-control" data-bind="value:duration().seconds,event:{change:onDurationEdit}" /></td>
                    </tr>
                </tbody>
            </table>
        </div>
        <div class="col-sm-12">
            <button class="btn btn-block btn-default" data-bind="click:onTimerButtonClick,text:timerButtonDisplay"></button>
        </div>
    </div>


</div>

@section scripts{
    
    <script src="~/Scripts/app/common.js"></script>
    <script src="~/Scripts/vendor/tock.js"></script>
    <script>
        var viewModel = null;


        function getSquares() {
            $.get(rootPath + 'api/Square', function(r, s) {

                var vm = { userSquares: [] };
                for (var i = 0; i < r.UserSquares.length; i++) {
                    var s = new Square(r.UserSquares[i]);
                    vm.userSquares.push(s);

                }

                viewModel = ko.mapping.fromJS(vm);
                ko.applyBindings(viewModel);
            });
        }

        var data = {
            UserSquares: [
                { Id: '742e0d12-2512-4896-a544-4e0ee9da149f', ParentId: '83A714A2-3752-4086-B42C-038D6CD7B1F7', Name: 'Square1', RunningTime: 69187, ActivityState: 0 }
            ]
        };

        function Square(options) {
            var postPath = rootPath + 'api/TimerAction';

            function toTimerActionModel(state) {
                return {
                    Time: new Date().getTime(),
                    Elapsed: result.displayTime() + result.timer.lap(),
                    ActivityState: state,
                    Id: result.id(),
                    ParentId: result.parentId()
                };
            }

            var settings = options || {};
            var result = {
                id: ko.observable(settings.UserSquareActivityId),
                parentId: ko.observable(settings.Id),
                displayTime: ko.observable(settings.RunningTime),
                duration: ko.observable({
                    days: ko.observable(0),
                    hours: ko.observable(0),
                    minutes: ko.observable(0),
                    seconds: ko.observable(0),
                    milliseconds: ko.observable(0)
                }),
                state: ko.observable(settings.ActivityState),
                timer: null,
                startTimer: function() {
                    result.timer.start();
                    $.post(postPath, toTimerActionModel(1, 0), function(r) {
                        result.id(r.Id);
                        result.state(r.ActivityState);
                    });

                },
                pauseTimer: function() {
                    result.timer.pause();
                    $.post(postPath, toTimerActionModel(2, 0), function(r) {
                        result.id(r.Id);
                        result.state(r.ActivityState);
                    });
                },
                resumeTimer: function() {
                    if (!result.timer.go) {
                        result.timer.start();
                        result.displayTime(0);
                    } else
                        result.timer.pause();
                    $.post(postPath, toTimerActionModel(1, 0), function(r) {
                        result.id(r.Id);
                        result.state(r.ActivityState);
                    });
                },
                init: function() {
                    var ms = result.displayTime();
                    var d = common.getDuration(ms);
                    result.duration().days(d.days);
                    result.duration().hours(d.hours);
                    result.duration().minutes(d.minutes);
                    result.duration().seconds(d.seconds);
                    result.duration().milliseconds(d.milliseconds);
                    result.timer = new Tock({ interval: 1000, callback: result.onTick });
                },
                onTimerButtonClick: function() {
                    switch (result.state()) {
                    case 0:
                        result.startTimer();
                        break;
                    case 1:
                        result.pauseTimer();
                        break;
                    case 2:
                        result.resumeTimer();
                        break;
                    default:
                        break;
                    }
                },
                onDurationEdit: function() {
                    if (result.state() != 0)
                        result.timer.stop();
                    var d = 0;
                    d += Number(result.duration().days()) * 86400000;
                    d += Number(result.duration().hours()) * 3600000;
                    d += Number(result.duration().minutes()) * 60000;
                    d += Number(result.duration().seconds()) * 1000;
                    result.displayTime(d);
                    if (result.state() != 0)
                        result.timer.start();

                },
                onTick: function(e) {
                    var ms = result.timer.lap() + result.displayTime();
                    var d = common.getDuration(ms);
                    result.duration().days(d.days);
                    result.duration().hours(d.hours);
                    result.duration().minutes(d.minutes);
                    result.duration().seconds(d.seconds);
                    result.duration().milliseconds(d.milliseconds);

                }


            };
            result.timerButtonDisplay = ko.computed(function() {
                var r = '';
                switch (result.state()) {
                case 0:
                    r = 'Start';
                    break;
                case 1:
                    r = 'Pause';
                    break;
                case 2:
                    r = 'Resume';
                    break;
                default:
                    break;

                }
                return r;
            }, this);
            result.init();
            return result;
        }


        $(function() {
            getSquares();
            //var vm = { userSquares: [] };
            //for (var i = 0; i < data.userSquares.length; i++) {
            //    var s = new Square(data.userSquares[i]);
            //    vm.userSquares.push(s);

            //}

            //viewModel = ko.mapping.fromJS(vm);
            //ko.applyBindings(viewModel);
        });
    </script>

}