<div class="row" data-bind="foreach:userSquares">
    <div class="col-sm-4" data-bind="visible:visible">
        <div class="panel panel-default">
            <div class="panel-body">
                <div class="col-sm-12 text-center">
                    <div class="input-group">
                        <input type="text" data-bind="value:name" class="form-control" />
                        <div class="input-group-addon">
                            <a href="javascript:void(0)" data-bind="click:onRenameClick"><span class="glyphicon glyphicon-floppy-save" aria-hidden="true"></span></a>
                        </div>
                    </div>
                </div>
                <div class="col-sm-12">
                    <table class="table">
                        <thead>
                            <tr>
                                <th><small>Days</small></th>


                                <th><small>Hours</small></th>


                                <th><small>Minutes</small></th>


                                <th><small>Seconds</small></th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td><input type="text" class="form-control" data-bind="value:duration.days,event:{change:onDurationEdit}" /></td>
                                <td><input type="text" class="form-control" data-bind="value:duration.hours,event:{change:onDurationEdit}" /></td>
                                <td><input type="text" class="form-control" data-bind="value:duration.minutes,event:{change:onDurationEdit}" /></td>
                                <td><input type="text" class="form-control" data-bind="value:duration.seconds,event:{change:onDurationEdit}" /></td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <div class="col-sm-12">
                    <button class="btn btn-block btn-default" data-bind="click:onTimerButtonClick,text:timerButtonDisplay"></button>
                </div>
                <div class="col-sm-12">
                    <button class="btn btn-block btn-default" data-bind="click:onTimerButtonResetClick,visible:canReset">Reset</button>
                </div>
                <div class="col-sm-12">
                    <button class="btn btn-block btn-default" data-bind="click:onHideButtonClick,visible:canHide">Hide</button>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-sm-12">
        <button class="btn btn-default btn-lg" id="addNew">Add New</button>
    </div>
</div>

@*<div class="col-sm-12" data-bind="with:clock">
    <table class="table">
        <thead>
            <tr>
                <th><small>Days</small></th>


                <th><small>Hours</small></th>


                <th><small>Minutes</small></th>


                <th><small>Seconds</small></th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td><input type="text" class="form-control" data-bind="value:days" /></td>
                <td><input type="text" class="form-control" data-bind="value:hours" /></td>
                <td><input type="text" class="form-control" data-bind="value:minutes" /></td>
                <td><input type="text" class="form-control" data-bind="value:seconds" /></td>
            </tr>
        </tbody>
    </table>
</div>*@

@section scripts{

    <script src="~/Scripts/app/common.js"></script>
    <script src="~/Scripts/vendor/tock.mod.js"></script>
    <script>
        function addNew() {
            var id = '00000000-0000-0000-0000-000000000000';
            $.get(rootPath + 'api/Square', { id: id }, function(r) {
                var square = new Square(r);
                viewModel.userSquares.push(square);
            });
        }

        function onTimerButtonClicked(e) {

            for (var i = 0; i < viewModel.userSquares().length; i++) {
                //if any are running
                var t = viewModel.userSquares()[i];
                if (t.id() != e.args.id()) {
                    if (t.data().StopWatch.State == 1) {
                       
                        t.pauseTimer();
                        t.updateState();
                        t.save();
                    }
                }
            }
        }

        function getSquares() {
            $.get(rootPath + 'api/Square', function(r) {
                var vm = { userSquares: [] };

                for (var i = 0; i < r.UserSquares.length; i++) {
                    var src = r.UserSquares[i];
                    var square = new Square(src);
                    vm.userSquares.push(square);

                }
                viewModel = ko.mapping.fromJS(vm);
                ko.applyBindings(viewModel);
            });
        }

        $(function() {
            getSquares();
            $(document).on('click', '#addNew', addNew);
            $(document).on('TimerStateChanged', onTimerButtonClicked);
        });

        var viewModel;

        function Square(options) {
            var settings = options;
            //need to resume
            if (settings.StopWatch.State == 1) {
                settings.StopWatch.Time = Date.now() - settings.StopWatch.Started;
            }
            var t = common.getDuration(settings.StopWatch.Time);

            var result = {
                canHide: ko.observable(false),
                canReset: ko.observable(false),
                duration: {
                    days: ko.observable(t.days),
                    hours: ko.observable(t.hours),
                    minutes: ko.observable(t.minutes),
                    seconds: ko.observable(t.seconds)
                },
                id: ko.observable(settings.Id),
                name: ko.observable(settings.Name),
                stopWatch: settings.StopWatch,
                timer: null,
                timerButtonDisplay: ko.observable(''),
                visible: ko.observable(true),

                onDurationEdit: function() {
                    var d = 0;
                    d += Number(result.duration.days()) * 86400000;
                    d += Number(result.duration.hours()) * 3600000;
                    d += Number(result.duration.minutes()) * 60000;
                    d += Number(result.duration.seconds()) * 1000;
                    result.timer.modify(d);
                    result.save();
                },
                onHideButtonClick: function() {},
                onRenameClick: function() {
                    var d = result.data();
                    $.post(rootPath + 'api/Square', d, function(r) {});
                },
                onTimerButtonClick: function() {
                    switch (result.timer.state) {
                    case 0:
                    case 3:
                        result.startTimer();
                        result.save();
                        break;
                    case 1:
                        result.pauseTimer();
                        result.save();
                        break;
                    case 2:
                        result.startTimer();
                        result.save();
                        break;
                    default:
                        break;
                    }
                    result.updateState();
                    $.event.trigger({ type: 'TimerStateChanged', args: result, time: new Date() });
                },
                onTimerButtonResetClick: function() {
                    result.timer.stop();
                    var d = result.timer.data();

                    $.post(rootPath + 'api/stopwatch', d, function(r) {
                        //do timer stuffs
                        result.timer.reset();
                        result.stopWatch = r;
                        result.timer.load(result.stopWatch);
                        result.refreshDuration(common.getDuration(0));
                        result.updateState(result.timer.state);
                    });
                },
                onTimerTick: function() {
                    if (result.timer) {
                        var d = common.getDuration(result.timer.lap());
                        result.refreshDuration(d);
                    }

                },

                data: function() {
                    return {
                        StopWatch: result.timer.data(),
                        Name: result.name(),
                        Id: result.id()
                    };
                },

                init: function() {
                    var timer = new Tock({ interval: 1000, callback: result.onTimerTick });
                    timer.load(settings.StopWatch);
                    result.timer = timer;
                    result.updateState();
                },
                pauseTimer: function() {
                    result.timer.pause();
                },
                refreshDuration: function(d) {
                    result.duration.days(d.days);
                    result.duration.hours(d.hours);
                    result.duration.minutes(d.minutes);
                    result.duration.seconds(d.seconds);
                },
                save: function() {

                    var d = result.timer.data();
                    $.post(rootPath + 'api/stopwatch', d, function(r, s) {});
                },
                startTimer: function() {
                    result.timer.start();
                },
                updateState: function() {
                    switch (result.timer.state) {
                    case 0:
                        result.timerButtonDisplay('Start');
                        result.canReset(false);
                        result.canHide(true);
                        break;
                    case 1:
                        result.timerButtonDisplay('Pause');
                        result.canReset(false);
                        result.canHide(false);
                        break;
                    case 2:
                        result.timerButtonDisplay('Resume');
                        result.canReset(true);
                        result.canHide(true);
                        break;
                    case 3:
                        result.timerButtonDisplay('Start');
                        result.canReset(false);
                        result.canHide(true);
                        break;
                    default:
                        break;

                    }
                }

            };

            result.init();
            return result;
        }


    </script>
}
