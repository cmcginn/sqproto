<div class="row" data-bind="foreach:userSquares">
    <div class="col-sm-4">
        <div class="panel panel-default">
            <div class="panel-body">
                <div class="col-sm-12 text-center">
                    <div class="input-group">
                        <input type="text" data-bind="value:name" class="form-control" />
                        <div class="input-group-addon">
                            <a href="javascript:void(0)" data-bind="click:onRenameClick"><span class="glyphicon glyphicon-floppy-save" aria-hidden="true"></span></a>
                        </div>
                    </div>
                </div>
                <div class="col-sm-12">
                    <table class="table">
                        <thead>
                            <tr>
                                <th><small>Days</small></th>


                                <th><small>Hours</small></th>


                                <th><small>Minutes</small></th>


                                <th><small>Seconds</small></th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td><input type="text" class="form-control" data-bind="value:duration().days,event:{change:onDurationEdit}" /></td>
                                <td><input type="text" class="form-control" data-bind="value:duration().hours,event:{change:onDurationEdit}" /></td>
                                <td><input type="text" class="form-control" data-bind="value:duration().minutes,event:{change:onDurationEdit}" /></td>
                                <td><input type="text" class="form-control" data-bind="value:duration().seconds,event:{change:onDurationEdit}" /></td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <div class="col-sm-12">
                    <button class="btn btn-block btn-default" data-bind="click:onTimerButtonClick,text:timerButtonDisplay"></button>
                </div>
                <div class="col-sm-12">
                    <button class="btn btn-block btn-default" data-bind="click:onTimerButtonResetClick,visible:canReset">Reset</button>
                </div>
            </div>
        </div>
    </div>


</div>


        @section scripts{

            <script src="~/Scripts/app/common.js"></script>
            <script src="~/Scripts/vendor/tock.js"></script>
            <script>
                var viewModel = null;


                function getSquares() {
                    $.get(rootPath + 'api/Square', function(r, s) {

                        var vm = { userSquares: [] };
                        for (var i = 0; i < r.UserSquares.length; i++) {
                            var s = new Square(r.UserSquares[i]);
                            vm.userSquares.push(s);

                        }

                        viewModel = ko.mapping.fromJS(vm);
                        ko.applyBindings(viewModel);
                    });
                }

                var data = {
                    UserSquares: [
                        { Id: '742e0d12-2512-4896-a544-4e0ee9da149f', ParentId: '83A714A2-3752-4086-B42C-038D6CD7B1F7', Name: 'Square1', RunningTime: 69187, ActivityState: 0 }
                    ]
                };

                function Square(options) {
                    var postPath = rootPath + 'api/TimerAction';

                    function toTimerActionModel(state) {

                        return {
                            Time: new Date().getTime(),
                            Elapsed: result.timer.lap(),
                            ActivityState: state,
                            Id: result.activityId(),
                            ParentId: result.id(),
                            Modified:false
                        };
                    }

                    var settings = options || {};
                    var result = {
                        id: ko.observable(settings.Id),
                        activityId: ko.observable(settings.UserSquareActivityId),
                        elapsed: ko.observable(settings.Elapsed),
                        duration: ko.observable({
                            days: ko.observable(0),
                            hours: ko.observable(0),
                            minutes: ko.observable(0),
                            seconds: ko.observable(0),
                            milliseconds: ko.observable(0)
                        }),
                        name: ko.observable(settings.Name),
                        state: ko.observable(settings.ActivityState),
                        timer: null,
                        canReset: ko.observable(false),
                        startTimer: function() {
                            result.timer.start(result.elapsed());
                            $.post(postPath, toTimerActionModel(1, 0), function(r) {
                                result.activityId(r.Id);
                                result.state(r.ActivityState);
                            });

                        },
                        pauseTimer: function() {
                            result.timer.pause();
                            $.post(postPath, toTimerActionModel(2, 0), function(r) {
                                result.activityId(r.Id);
                                result.state(r.ActivityState);
                            });
                        },
                        resumeTimer: function() {
                            if (result.timer.pause_time == 0) {
                                result.timer.start(result.elapsed());
                            } else
                                result.timer.pause();
                            $.post(postPath, toTimerActionModel(1, 0), function(r) {
                                result.activityId(r.Id);
                                result.state(r.ActivityState);
                            });
                        },
                        stopTimer: function() {

                            result.timer.stop();
                            $.post(postPath, toTimerActionModel(3, 0), function(r) {
                                result.activityId(r.Id);
                                result.state(r.ActivityState);
                                var d = common.getDuration(0);
                                result.duration().days(d.days);
                                result.duration().hours(d.hours);
                                result.duration().minutes(d.minutes);
                                result.duration().seconds(d.seconds);
                                result.duration().milliseconds(d.milliseconds);
                                result.elapsed(0);
                            });

                        },
                        toData: function() {
                            return {
                                UserSquareActivityId: result.activityId(),
                                Id: result.id(),
                                ActivityState: result.state(),
                                Elapsed: result.timer.lap(),
                                Time: new Date().getTime(),
                                Name: result.name()
                            };
                        },
                        init: function() {
                            var ms = result.elapsed();
                            var d = common.getDuration(ms);
                            result.duration().days(d.days);
                            result.duration().hours(d.hours);
                            result.duration().minutes(d.minutes);
                            result.duration().seconds(d.seconds);
                            result.duration().milliseconds(d.milliseconds);
                            result.timer = new Tock({ interval: 1000, callback: result.onTick });
                            if (result.state() == 1)
                                result.timer.start(result.elapsed());
                        },
                        onDurationEdit: function() {
                            if (result.state() != 0)
                                result.timer.stop();
                            var d = 0;
                            d += Number(result.duration().days()) * 86400000;
                            d += Number(result.duration().hours()) * 3600000;
                            d += Number(result.duration().minutes()) * 60000;
                            d += Number(result.duration().seconds()) * 1000;

                            result.elapsed(d);
                            var data = toTimerActionModel(result.state(), 0);
                            data.Elapsed = d;
                            data.Modified = true;
                            $.post(postPath, data, function(r) {
                                if (result.state() != 0);
                                    result.timer.start(result.elapsed());
                            });


                        },
                        onRenameClick: function() {
                            $.post(rootPath + 'Home/Rename', result.toData(), function(r, s) {});
                        },
                        onTick: function(e) {
                            var ms = result.timer.lap();
                            var d = common.getDuration(ms);
                            result.duration().days(d.days);
                            result.duration().hours(d.hours);
                            result.duration().minutes(d.minutes);
                            result.duration().seconds(d.seconds);
                            result.duration().milliseconds(d.milliseconds);

                        },

                        onTimerButtonClick: function() {
                            switch (result.state()) {
                            case 0:
                                result.startTimer();
                                break;
                            case 1:
                                result.pauseTimer();
                                break;
                            case 2:
                                result.resumeTimer();
                                break;
                            case 3:
                                result.startTimer();
                                break;
                            default:
                                break;
                            }
                        },
                        onTimerButtonResetClick: function() {
                            result.stopTimer();
                        },

                    };

                    result.timerButtonDisplay = ko.computed(function() {
                        var r = '';
                        switch (result.state()) {
                        case 0:
                            r = 'Start';
                            result.canReset(false);
                            break;
                        case 1:
                            r = 'Pause';
                            result.canReset(false);
                            break;
                        case 2:
                            r = 'Resume';
                            result.canReset(true);
                            break;
                        case 3:
                            r = 'Start';
                            result.canReset(false);
                            break;
                        default:
                            break;

                        }
                        return r;
                    }, this);
                    result.init();
                    return result;
                }


                $(function() {
                    getSquares();

                });
            </script>
        }
