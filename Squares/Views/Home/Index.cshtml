<div style="margin:auto">
    <div data-bind="foreach:UserSquares" class="row">
        <div class="col-sm-3">
            <div class="panel panel-default">
                <div class="panel-body">
                    <div class="col-sm-12 text-center">
                        <div class="input-group">
                            <input type="text" data-bind="value:name" class="form-control" />
                            <div class="input-group-addon">
                                <a href="javascript:void(0)" data-bind="click:onRenameClick"><span class="glyphicon glyphicon-floppy-save" aria-hidden="true"></span></a>
                            </div>
 

                        </div>



                    </div>
                    <div class="col-sm-12 text-center">
                        <div class="btn btn-default btn-lg" data-bind="text:displayValue,click:onSquareClick"></div>
                    </div>
                    <div class="col-sm-12 text-center" data-bind="visible:canReset">
                        <div class="btn btn-sm btn-default" data-bind="click:onResetClick">Reset</div>
                    </div>
                </div>
            </div>


        </div>

    </div>


    @section scripts{
    </div>

    <script src="~/Scripts/vendor/tock.js"></script>
    @*<script src="~/Scripts/app/model.js"></script>*@
    <script src="~/Scripts/app/square.js"></script>
    <script>
        var viewModel = {};
        function stopSquares(e) {
            var data = { UserSquares: [] };
            for (var i = 0; i < viewModel.UserSquares().length; i++) {

                if (viewModel.UserSquares()[i].id() != e.args.id()) {
                    viewModel.UserSquares()[i].pauseTimer();
                }
                data.UserSquares.push(viewModel.UserSquares()[i].toData());
            }


            $.post(rootPath + 'api/Square', data, function (r, s) {

            });
        }

        function resetSquare(e) {
            $.post(rootPath + 'api/Square/ResetTimer/' + e.args.id(), function (r, s) {

                e.args.stopTimer();
            });
        }

        function renameSquare(e) {

            var data = e.args.toData();
            $.post(rootPath + 'api/Square/Rename', data, function(r, s) {

            });
        }
        $(function () {

            $.get(rootPath + 'api/Square', function (r, s) {

                for (var i = 0; i < r.UserSquares.length; i++) {
                    var vm = r;
                    r.UserSquares[i] = new Square(r.UserSquares[i]);
                    console.log(r.UserSquares[i].activityState());
                    if (r.UserSquares[i].activityState() == 1) {
                        r.UserSquares[i].resumeTimer();
                    }
                }
                viewModel = ko.mapping.fromJS(vm);
                ko.applyBindings(viewModel);
                //for (var i = 0; i < r.UserSquares.length; i++) {
                //    var squareSettings = {
                //        square:{
                //            elapsed: r.UserSquares[i].Elapsed,
                //            name: r.UserSquares[i].Name,
                //            id: r.UserSquares[i].Id
                //        }
                //    };
                //    var square = new Square(squareSettings);
                //    vm.userSquares.push(square);
                //}
                //viewModel = ko.mapping.fromJS(vm);
                //
                $(document).on('squareClicked', stopSquares)
                    .on('resetClicked', resetSquare)
                    .on('renameClicked', renameSquare);
            });

        });

    </script>
    }
